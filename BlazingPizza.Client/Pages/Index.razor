
@page "/"
@inject HttpClient HttpClient
@inject OrderState OrderState
@inject OrderState OrderState
@inject IJSRuntime JavaScript
@inject IJSRuntime JS


<div class="main">
    <ul class="pizza-cards">
        @if (specials is not null)
        {
            @foreach (var special in specials)
            {
                <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in Order.Pizzas)
            {
                <div class="cart-item">
                    <button type="button" class="close text-danger" aria-label="Close"
                            @onclick="() => RemovePizzaConfirmation(configuredPizza)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <div class="title">@($"{configuredPizza.Size} {configuredPizza.Special.Name}")</div>
                    <div class="item-price">@configuredPizza.GetFormattedTotalPrice()</div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(Order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@Order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Order >
        </a>
    </div>
</div>

<TemplatedDialog Show="OrderState.ShowingConfigureDialog">
    <ConfigurePizzaDialog
        Pizza="OrderState.ConfiguringPizza"
        OnCancel="OrderState.CancelConfigurePizzaDialog"
        OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
</TemplatedDialog>

@code {
    List<PizzaSpecial>? specials;
    Order Order => OrderState.Order;

    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>("specials");
    }

async Task RemovePizzaConfirmation(Pizza removePizza)
{
    Dictionary<string, bool> result = await JavaScript.InvokeAsync<Dictionary<string, bool>>("Swal.fire", new
    {
        title = "Are you sure?",
        text = $"Do you want to remove the \"{removePizza.Special.Name}\" from your order?",
        icon = "warning",
        showCancelButton = true,
        buttons = new
        {
            abort = new { text = "No, leave it in my order", value = false },
            confirm = new { text = "Yes, remove pizza", value = true }
        }
    });

    bool confirmValue;
    if (result.TryGetValue("value", out confirmValue) && confirmValue)
    {
        OrderState.RemoveConfiguredPizza(removePizza);
    }
}



}
